// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Message.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SET_GATE_ID struct {
	GateId               uint32   `protobuf:"varint,1,opt,name=GateId,proto3" json:"GateId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SET_GATE_ID) Reset()         { *m = SET_GATE_ID{} }
func (m *SET_GATE_ID) String() string { return proto.CompactTextString(m) }
func (*SET_GATE_ID) ProtoMessage()    {}
func (*SET_GATE_ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_64b0f1bc979aed9f, []int{0}
}
func (m *SET_GATE_ID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SET_GATE_ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SET_GATE_ID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SET_GATE_ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SET_GATE_ID.Merge(m, src)
}
func (m *SET_GATE_ID) XXX_Size() int {
	return m.Size()
}
func (m *SET_GATE_ID) XXX_DiscardUnknown() {
	xxx_messageInfo_SET_GATE_ID.DiscardUnknown(m)
}

var xxx_messageInfo_SET_GATE_ID proto.InternalMessageInfo

func (m *SET_GATE_ID) GetGateId() uint32 {
	if m != nil {
		return m.GateId
	}
	return 0
}

type SET_GAME_ID struct {
	GameId               uint32   `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId,omitempty"`
	IsReconnect          bool     `protobuf:"varint,2,opt,name=IsReconnect,proto3" json:"IsReconnect,omitempty"`
	IsRestore            bool     `protobuf:"varint,3,opt,name=IsRestore,proto3" json:"IsRestore,omitempty"`
	IsBanBootEntity      bool     `protobuf:"varint,4,opt,name=IsBanBootEntity,proto3" json:"IsBanBootEntity,omitempty"`
	EntityIdList         []string `protobuf:"bytes,5,rep,name=EntityIdList,proto3" json:"EntityIdList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SET_GAME_ID) Reset()         { *m = SET_GAME_ID{} }
func (m *SET_GAME_ID) String() string { return proto.CompactTextString(m) }
func (*SET_GAME_ID) ProtoMessage()    {}
func (*SET_GAME_ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_64b0f1bc979aed9f, []int{1}
}
func (m *SET_GAME_ID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SET_GAME_ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SET_GAME_ID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SET_GAME_ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SET_GAME_ID.Merge(m, src)
}
func (m *SET_GAME_ID) XXX_Size() int {
	return m.Size()
}
func (m *SET_GAME_ID) XXX_DiscardUnknown() {
	xxx_messageInfo_SET_GAME_ID.DiscardUnknown(m)
}

var xxx_messageInfo_SET_GAME_ID proto.InternalMessageInfo

func (m *SET_GAME_ID) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *SET_GAME_ID) GetIsReconnect() bool {
	if m != nil {
		return m.IsReconnect
	}
	return false
}

func (m *SET_GAME_ID) GetIsRestore() bool {
	if m != nil {
		return m.IsRestore
	}
	return false
}

func (m *SET_GAME_ID) GetIsBanBootEntity() bool {
	if m != nil {
		return m.IsBanBootEntity
	}
	return false
}

func (m *SET_GAME_ID) GetEntityIdList() []string {
	if m != nil {
		return m.EntityIdList
	}
	return nil
}

type SET_GAME_ID_ACK struct {
	Dispid               uint32            `protobuf:"varint,1,opt,name=dispid,proto3" json:"dispid,omitempty"`
	IsDeploymentReady    bool              `protobuf:"varint,2,opt,name=isDeploymentReady,proto3" json:"isDeploymentReady,omitempty"`
	ConnectedGameIDs     []uint32          `protobuf:"varint,3,rep,packed,name=connectedGameIDs,proto3" json:"connectedGameIDs,omitempty"`
	RejectEntities       []string          `protobuf:"bytes,4,rep,name=rejectEntities,proto3" json:"rejectEntities,omitempty"`
	KvregRegisterMap     map[string]string `protobuf:"bytes,5,rep,name=kvregRegisterMap,proto3" json:"kvregRegisterMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SET_GAME_ID_ACK) Reset()         { *m = SET_GAME_ID_ACK{} }
func (m *SET_GAME_ID_ACK) String() string { return proto.CompactTextString(m) }
func (*SET_GAME_ID_ACK) ProtoMessage()    {}
func (*SET_GAME_ID_ACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_64b0f1bc979aed9f, []int{2}
}
func (m *SET_GAME_ID_ACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SET_GAME_ID_ACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SET_GAME_ID_ACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SET_GAME_ID_ACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SET_GAME_ID_ACK.Merge(m, src)
}
func (m *SET_GAME_ID_ACK) XXX_Size() int {
	return m.Size()
}
func (m *SET_GAME_ID_ACK) XXX_DiscardUnknown() {
	xxx_messageInfo_SET_GAME_ID_ACK.DiscardUnknown(m)
}

var xxx_messageInfo_SET_GAME_ID_ACK proto.InternalMessageInfo

func (m *SET_GAME_ID_ACK) GetDispid() uint32 {
	if m != nil {
		return m.Dispid
	}
	return 0
}

func (m *SET_GAME_ID_ACK) GetIsDeploymentReady() bool {
	if m != nil {
		return m.IsDeploymentReady
	}
	return false
}

func (m *SET_GAME_ID_ACK) GetConnectedGameIDs() []uint32 {
	if m != nil {
		return m.ConnectedGameIDs
	}
	return nil
}

func (m *SET_GAME_ID_ACK) GetRejectEntities() []string {
	if m != nil {
		return m.RejectEntities
	}
	return nil
}

func (m *SET_GAME_ID_ACK) GetKvregRegisterMap() map[string]string {
	if m != nil {
		return m.KvregRegisterMap
	}
	return nil
}

type NOTIFY_CREATE_ENTITY struct {
	EntityId             string   `protobuf:"bytes,1,opt,name=EntityId,proto3" json:"EntityId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NOTIFY_CREATE_ENTITY) Reset()         { *m = NOTIFY_CREATE_ENTITY{} }
func (m *NOTIFY_CREATE_ENTITY) String() string { return proto.CompactTextString(m) }
func (*NOTIFY_CREATE_ENTITY) ProtoMessage()    {}
func (*NOTIFY_CREATE_ENTITY) Descriptor() ([]byte, []int) {
	return fileDescriptor_64b0f1bc979aed9f, []int{3}
}
func (m *NOTIFY_CREATE_ENTITY) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NOTIFY_CREATE_ENTITY) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NOTIFY_CREATE_ENTITY.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NOTIFY_CREATE_ENTITY) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NOTIFY_CREATE_ENTITY.Merge(m, src)
}
func (m *NOTIFY_CREATE_ENTITY) XXX_Size() int {
	return m.Size()
}
func (m *NOTIFY_CREATE_ENTITY) XXX_DiscardUnknown() {
	xxx_messageInfo_NOTIFY_CREATE_ENTITY.DiscardUnknown(m)
}

var xxx_messageInfo_NOTIFY_CREATE_ENTITY proto.InternalMessageInfo

func (m *NOTIFY_CREATE_ENTITY) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

type NOTIFY_DESTROY_ENTITY struct {
	EntityId             string   `protobuf:"bytes,1,opt,name=EntityId,proto3" json:"EntityId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NOTIFY_DESTROY_ENTITY) Reset()         { *m = NOTIFY_DESTROY_ENTITY{} }
func (m *NOTIFY_DESTROY_ENTITY) String() string { return proto.CompactTextString(m) }
func (*NOTIFY_DESTROY_ENTITY) ProtoMessage()    {}
func (*NOTIFY_DESTROY_ENTITY) Descriptor() ([]byte, []int) {
	return fileDescriptor_64b0f1bc979aed9f, []int{4}
}
func (m *NOTIFY_DESTROY_ENTITY) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NOTIFY_DESTROY_ENTITY) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NOTIFY_DESTROY_ENTITY.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NOTIFY_DESTROY_ENTITY) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NOTIFY_DESTROY_ENTITY.Merge(m, src)
}
func (m *NOTIFY_DESTROY_ENTITY) XXX_Size() int {
	return m.Size()
}
func (m *NOTIFY_DESTROY_ENTITY) XXX_DiscardUnknown() {
	xxx_messageInfo_NOTIFY_DESTROY_ENTITY.DiscardUnknown(m)
}

var xxx_messageInfo_NOTIFY_DESTROY_ENTITY proto.InternalMessageInfo

func (m *NOTIFY_DESTROY_ENTITY) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

type KVREG_REGISTER struct {
	SrvId                string   `protobuf:"bytes,1,opt,name=SrvId,proto3" json:"SrvId,omitempty"`
	Info                 string   `protobuf:"bytes,2,opt,name=Info,proto3" json:"Info,omitempty"`
	Force                bool     `protobuf:"varint,3,opt,name=Force,proto3" json:"Force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KVREG_REGISTER) Reset()         { *m = KVREG_REGISTER{} }
func (m *KVREG_REGISTER) String() string { return proto.CompactTextString(m) }
func (*KVREG_REGISTER) ProtoMessage()    {}
func (*KVREG_REGISTER) Descriptor() ([]byte, []int) {
	return fileDescriptor_64b0f1bc979aed9f, []int{5}
}
func (m *KVREG_REGISTER) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVREG_REGISTER) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KVREG_REGISTER.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KVREG_REGISTER) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVREG_REGISTER.Merge(m, src)
}
func (m *KVREG_REGISTER) XXX_Size() int {
	return m.Size()
}
func (m *KVREG_REGISTER) XXX_DiscardUnknown() {
	xxx_messageInfo_KVREG_REGISTER.DiscardUnknown(m)
}

var xxx_messageInfo_KVREG_REGISTER proto.InternalMessageInfo

func (m *KVREG_REGISTER) GetSrvId() string {
	if m != nil {
		return m.SrvId
	}
	return ""
}

func (m *KVREG_REGISTER) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *KVREG_REGISTER) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type CREATE_ENTITY_SOMEWHERE struct {
	GameId               uint32   `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId,omitempty"`
	EntityId             string   `protobuf:"bytes,2,opt,name=EntityId,proto3" json:"EntityId,omitempty"`
	TypeName             string   `protobuf:"bytes,3,opt,name=TypeName,proto3" json:"TypeName,omitempty"`
	Data                 string   `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CREATE_ENTITY_SOMEWHERE) Reset()         { *m = CREATE_ENTITY_SOMEWHERE{} }
func (m *CREATE_ENTITY_SOMEWHERE) String() string { return proto.CompactTextString(m) }
func (*CREATE_ENTITY_SOMEWHERE) ProtoMessage()    {}
func (*CREATE_ENTITY_SOMEWHERE) Descriptor() ([]byte, []int) {
	return fileDescriptor_64b0f1bc979aed9f, []int{6}
}
func (m *CREATE_ENTITY_SOMEWHERE) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CREATE_ENTITY_SOMEWHERE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CREATE_ENTITY_SOMEWHERE.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CREATE_ENTITY_SOMEWHERE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CREATE_ENTITY_SOMEWHERE.Merge(m, src)
}
func (m *CREATE_ENTITY_SOMEWHERE) XXX_Size() int {
	return m.Size()
}
func (m *CREATE_ENTITY_SOMEWHERE) XXX_DiscardUnknown() {
	xxx_messageInfo_CREATE_ENTITY_SOMEWHERE.DiscardUnknown(m)
}

var xxx_messageInfo_CREATE_ENTITY_SOMEWHERE proto.InternalMessageInfo

func (m *CREATE_ENTITY_SOMEWHERE) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *CREATE_ENTITY_SOMEWHERE) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *CREATE_ENTITY_SOMEWHERE) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *CREATE_ENTITY_SOMEWHERE) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*SET_GATE_ID)(nil), "pb.SET_GATE_ID")
	proto.RegisterType((*SET_GAME_ID)(nil), "pb.SET_GAME_ID")
	proto.RegisterType((*SET_GAME_ID_ACK)(nil), "pb.SET_GAME_ID_ACK")
	proto.RegisterMapType((map[string]string)(nil), "pb.SET_GAME_ID_ACK.KvregRegisterMapEntry")
	proto.RegisterType((*NOTIFY_CREATE_ENTITY)(nil), "pb.NOTIFY_CREATE_ENTITY")
	proto.RegisterType((*NOTIFY_DESTROY_ENTITY)(nil), "pb.NOTIFY_DESTROY_ENTITY")
	proto.RegisterType((*KVREG_REGISTER)(nil), "pb.KVREG_REGISTER")
	proto.RegisterType((*CREATE_ENTITY_SOMEWHERE)(nil), "pb.CREATE_ENTITY_SOMEWHERE")
}

func init() { proto.RegisterFile("Message.proto", fileDescriptor_64b0f1bc979aed9f) }

var fileDescriptor_64b0f1bc979aed9f = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x6e, 0xd3, 0x40,
	0x14, 0xc6, 0xb1, 0x9d, 0x56, 0xf5, 0x0b, 0x69, 0xc3, 0xa8, 0x2d, 0x56, 0x85, 0x22, 0xcb, 0x12,
	0xc8, 0x20, 0xe4, 0x45, 0xbb, 0x41, 0xb0, 0x6a, 0xe2, 0x69, 0xb0, 0x42, 0x12, 0x34, 0x36, 0xa0,
	0xb0, 0xb1, 0x9c, 0x78, 0x88, 0x4c, 0x1b, 0xdb, 0xf2, 0x0c, 0x91, 0xbc, 0xe0, 0x1e, 0xdc, 0x83,
	0x43, 0xc0, 0x92, 0x23, 0xa0, 0x70, 0x11, 0xe4, 0xb1, 0x93, 0xe6, 0x0f, 0x48, 0xdd, 0xbd, 0xef,
	0x7b, 0xdf, 0x8c, 0x7f, 0x6f, 0xf4, 0x0c, 0x8d, 0x3e, 0x65, 0x2c, 0x98, 0x52, 0x2b, 0xcd, 0x12,
	0x9e, 0x20, 0x39, 0x1d, 0x1b, 0x8f, 0xa1, 0xee, 0x62, 0xcf, 0xef, 0x5e, 0x7a, 0xd8, 0x77, 0x6c,
	0x74, 0x0a, 0xfb, 0xdd, 0x80, 0x53, 0x27, 0xd4, 0x24, 0x5d, 0x32, 0x1b, 0xa4, 0x52, 0xc6, 0x77,
	0x69, 0x99, 0xeb, 0xdf, 0xe6, 0x66, 0x1b, 0xb9, 0x42, 0x21, 0x1d, 0xea, 0x0e, 0x23, 0x74, 0x92,
	0xc4, 0x31, 0x9d, 0x70, 0x4d, 0xd6, 0x25, 0xf3, 0x80, 0xac, 0x5b, 0xe8, 0x11, 0xa8, 0x85, 0x64,
	0x3c, 0xc9, 0xa8, 0xa6, 0x88, 0xfe, 0xad, 0x81, 0x4c, 0x38, 0x72, 0x58, 0x3b, 0x88, 0xdb, 0x49,
	0xc2, 0x71, 0xcc, 0x23, 0x9e, 0x6b, 0x35, 0x91, 0xd9, 0xb6, 0x91, 0x01, 0xf7, 0xcb, 0xca, 0x09,
	0xdf, 0x44, 0x8c, 0x6b, 0x7b, 0xba, 0x62, 0xaa, 0x64, 0xc3, 0x33, 0x7e, 0xc8, 0x70, 0xb4, 0x46,
	0xed, 0x5f, 0x76, 0x7a, 0x05, 0x79, 0x18, 0xb1, 0x34, 0x5a, 0x91, 0x97, 0x0a, 0x3d, 0x87, 0x07,
	0x11, 0xb3, 0x69, 0x7a, 0x93, 0xe4, 0x33, 0x1a, 0x73, 0x42, 0x83, 0x30, 0xaf, 0xf8, 0x77, 0x1b,
	0xe8, 0x19, 0x34, 0xab, 0x81, 0x68, 0x28, 0x46, 0xb7, 0x99, 0xa6, 0xe8, 0x8a, 0xd9, 0x20, 0x3b,
	0x3e, 0x7a, 0x02, 0x87, 0x19, 0xfd, 0x4c, 0x27, 0x25, 0x79, 0x44, 0x99, 0x56, 0x13, 0xac, 0x5b,
	0x2e, 0x7a, 0x07, 0xcd, 0xeb, 0x79, 0x46, 0xa7, 0x84, 0x4e, 0x23, 0xc6, 0x69, 0xd6, 0x0f, 0x52,
	0x31, 0x55, 0xfd, 0xfc, 0xa9, 0x95, 0x8e, 0xad, 0xad, 0x41, 0xac, 0xde, 0x56, 0x16, 0xc7, 0x3c,
	0xcb, 0xc9, 0xce, 0x15, 0x67, 0x1d, 0x38, 0xf9, 0x67, 0x14, 0x35, 0x41, 0xb9, 0xa6, 0xb9, 0x78,
	0x06, 0x95, 0x14, 0x25, 0x3a, 0x86, 0xbd, 0x79, 0x70, 0xf3, 0x85, 0x8a, 0xb9, 0x55, 0x52, 0x8a,
	0x97, 0xf2, 0x0b, 0xc9, 0x38, 0x87, 0xe3, 0xc1, 0xd0, 0x73, 0xae, 0x46, 0x7e, 0x87, 0xe0, 0x62,
	0x57, 0xf0, 0xc0, 0x73, 0xbc, 0x11, 0x3a, 0x83, 0x83, 0xe5, 0x8b, 0x57, 0x17, 0xad, 0xb4, 0x71,
	0x01, 0x27, 0xd5, 0x19, 0x1b, 0xbb, 0x1e, 0x19, 0x8e, 0xee, 0x72, 0xe8, 0x2d, 0x1c, 0xf6, 0xde,
	0x13, 0xdc, 0xf5, 0x09, 0xee, 0x3a, 0xae, 0x87, 0x49, 0x01, 0xe5, 0x66, 0xf3, 0x55, 0xb4, 0x14,
	0x08, 0x41, 0xcd, 0x89, 0x3f, 0x25, 0x15, 0xa9, 0xa8, 0x8b, 0xe4, 0x55, 0x92, 0x4d, 0x96, 0x6b,
	0x55, 0x0a, 0xe3, 0x2b, 0x3c, 0xdc, 0x60, 0xf6, 0xdd, 0x61, 0x1f, 0x7f, 0x78, 0x8d, 0x09, 0xfe,
	0xef, 0x16, 0xaf, 0x03, 0xca, 0x9b, 0x80, 0x45, 0xcf, 0xcb, 0x53, 0x3a, 0x08, 0x66, 0xe5, 0x77,
	0x54, 0xb2, 0xd2, 0x05, 0x94, 0x1d, 0xf0, 0x40, 0xac, 0xac, 0x4a, 0x44, 0xdd, 0x3e, 0xfd, 0xb9,
	0x68, 0x49, 0xbf, 0x16, 0x2d, 0xe9, 0xf7, 0xa2, 0x25, 0x7d, 0xfb, 0xd3, 0xba, 0xf7, 0xb1, 0x66,
	0xbd, 0x4a, 0xc7, 0xe3, 0x7d, 0xf1, 0x0f, 0x5e, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xe5,
	0x2e, 0x73, 0x94, 0x03, 0x00, 0x00,
}

func (m *SET_GATE_ID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SET_GATE_ID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SET_GATE_ID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GateId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.GateId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SET_GAME_ID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SET_GAME_ID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SET_GAME_ID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EntityIdList) > 0 {
		for iNdEx := len(m.EntityIdList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EntityIdList[iNdEx])
			copy(dAtA[i:], m.EntityIdList[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.EntityIdList[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.IsBanBootEntity {
		i--
		if m.IsBanBootEntity {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsRestore {
		i--
		if m.IsRestore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsReconnect {
		i--
		if m.IsReconnect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.GameId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SET_GAME_ID_ACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SET_GAME_ID_ACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SET_GAME_ID_ACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KvregRegisterMap) > 0 {
		for k := range m.KvregRegisterMap {
			v := m.KvregRegisterMap[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMessage(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.RejectEntities) > 0 {
		for iNdEx := len(m.RejectEntities) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RejectEntities[iNdEx])
			copy(dAtA[i:], m.RejectEntities[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.RejectEntities[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ConnectedGameIDs) > 0 {
		dAtA2 := make([]byte, len(m.ConnectedGameIDs)*10)
		var j1 int
		for _, num := range m.ConnectedGameIDs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMessage(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsDeploymentReady {
		i--
		if m.IsDeploymentReady {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Dispid != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Dispid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NOTIFY_CREATE_ENTITY) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NOTIFY_CREATE_ENTITY) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NOTIFY_CREATE_ENTITY) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EntityId) > 0 {
		i -= len(m.EntityId)
		copy(dAtA[i:], m.EntityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.EntityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NOTIFY_DESTROY_ENTITY) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NOTIFY_DESTROY_ENTITY) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NOTIFY_DESTROY_ENTITY) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EntityId) > 0 {
		i -= len(m.EntityId)
		copy(dAtA[i:], m.EntityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.EntityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KVREG_REGISTER) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVREG_REGISTER) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KVREG_REGISTER) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Info) > 0 {
		i -= len(m.Info)
		copy(dAtA[i:], m.Info)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Info)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrvId) > 0 {
		i -= len(m.SrvId)
		copy(dAtA[i:], m.SrvId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SrvId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CREATE_ENTITY_SOMEWHERE) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CREATE_ENTITY_SOMEWHERE) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CREATE_ENTITY_SOMEWHERE) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TypeName) > 0 {
		i -= len(m.TypeName)
		copy(dAtA[i:], m.TypeName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TypeName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EntityId) > 0 {
		i -= len(m.EntityId)
		copy(dAtA[i:], m.EntityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.EntityId)))
		i--
		dAtA[i] = 0x12
	}
	if m.GameId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SET_GATE_ID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GateId != 0 {
		n += 1 + sovMessage(uint64(m.GateId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SET_GAME_ID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovMessage(uint64(m.GameId))
	}
	if m.IsReconnect {
		n += 2
	}
	if m.IsRestore {
		n += 2
	}
	if m.IsBanBootEntity {
		n += 2
	}
	if len(m.EntityIdList) > 0 {
		for _, s := range m.EntityIdList {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SET_GAME_ID_ACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dispid != 0 {
		n += 1 + sovMessage(uint64(m.Dispid))
	}
	if m.IsDeploymentReady {
		n += 2
	}
	if len(m.ConnectedGameIDs) > 0 {
		l = 0
		for _, e := range m.ConnectedGameIDs {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	if len(m.RejectEntities) > 0 {
		for _, s := range m.RejectEntities {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.KvregRegisterMap) > 0 {
		for k, v := range m.KvregRegisterMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + 1 + len(v) + sovMessage(uint64(len(v)))
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NOTIFY_CREATE_ENTITY) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EntityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NOTIFY_DESTROY_ENTITY) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EntityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KVREG_REGISTER) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrvId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Force {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CREATE_ENTITY_SOMEWHERE) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovMessage(uint64(m.GameId))
	}
	l = len(m.EntityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TypeName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SET_GATE_ID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SET_GATE_ID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SET_GATE_ID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateId", wireType)
			}
			m.GateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GateId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SET_GAME_ID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SET_GAME_ID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SET_GAME_ID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReconnect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReconnect = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRestore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRestore = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBanBootEntity", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBanBootEntity = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityIdList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityIdList = append(m.EntityIdList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SET_GAME_ID_ACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SET_GAME_ID_ACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SET_GAME_ID_ACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dispid", wireType)
			}
			m.Dispid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dispid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeploymentReady", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeploymentReady = bool(v != 0)
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ConnectedGameIDs = append(m.ConnectedGameIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ConnectedGameIDs) == 0 {
					m.ConnectedGameIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ConnectedGameIDs = append(m.ConnectedGameIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedGameIDs", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectEntities", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectEntities = append(m.RejectEntities, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvregRegisterMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvregRegisterMap == nil {
				m.KvregRegisterMap = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.KvregRegisterMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NOTIFY_CREATE_ENTITY) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NOTIFY_CREATE_ENTITY: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NOTIFY_CREATE_ENTITY: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NOTIFY_DESTROY_ENTITY) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NOTIFY_DESTROY_ENTITY: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NOTIFY_DESTROY_ENTITY: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVREG_REGISTER) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVREG_REGISTER: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVREG_REGISTER: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrvId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrvId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CREATE_ENTITY_SOMEWHERE) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CREATE_ENTITY_SOMEWHERE: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CREATE_ENTITY_SOMEWHERE: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
