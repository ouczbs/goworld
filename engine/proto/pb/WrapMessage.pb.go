// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: WrapMessage.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommandList int32

const (
	// MT_SET_GAME_ID is a message type for game
	CommandList_MT_SYSTEM_SERVICE_MSG_TYPE_START CommandList = 0
	CommandList_MT_SET_GAME_ID                   CommandList = 1
	// MT_SET_GATE_ID is a message type for gate
	CommandList_MT_SET_GATE_ID CommandList = 2
	// MT_NOTIFY_CREATE_ENTITY is a message type for creating entities
	CommandList_MT_NOTIFY_CREATE_ENTITY CommandList = 3
	// MT_NOTIFY_DESTROY_ENTITY is a message type for destroying entities
	CommandList_MT_NOTIFY_DESTROY_ENTITY CommandList = 4
	// MT_KVREG_REGISTER is a message type for declaring services
	CommandList_MT_KVREG_REGISTER CommandList = 5
	// MT_UNDECLARE_SERVICE is a message type for undeclaring services
	CommandList_MT_UNDECLARE_SERVICE CommandList = 6
	// MT_CREATE_ENTITY_SOMEWHERE is a message type for creating entities
	CommandList_MT_CREATE_ENTITY_SOMEWHERE CommandList = 7
	// MT_LOAD_ENTITY_SOMEWHERE is a message type loading entities
	CommandList_MT_LOAD_ENTITY_SOMEWHERE CommandList = 8
	// MT_NOTIFY_CLIENT_CONNECTED is a message type for clients
	CommandList_MT_NOTIFY_CLIENT_CONNECTED CommandList = 9
	// MT_NOTIFY_CLIENT_DISCONNECTED is a message type for clients
	CommandList_MT_NOTIFY_CLIENT_DISCONNECTED CommandList = 10
	// MT_SYNC_POSITION_YAW_FROM_CLIENT is a message type for clients
	CommandList_MT_SYNC_POSITION_YAW_FROM_CLIENT CommandList = 11
	// MT_NOTIFY_ALL_GAMES_CONNECTED is a message type to notify all games connected
	CommandList_MT_NOTIFY_ALL_GAMES_CONNECTED CommandList = 12
	// NOT USED ANYMORE
	// MT_NOTIFY_GATE_DISCONNECTED is a message type to notify gate disconnected
	CommandList_MT_NOTIFY_GATE_DISCONNECTED CommandList = 13
	// MT_START_FREEZE_GAME is a message type for hot swapping
	CommandList_MT_START_FREEZE_GAME CommandList = 14
	// MT_START_FREEZE_GAME_ACK is a message type for hot swapping
	CommandList_MT_START_FREEZE_GAME_ACK CommandList = 15
	// Message types for migrating
	// MT_MIGRATE_REQUEST is a message type for entity migrations
	CommandList_MT_MIGRATE_REQUEST CommandList = 16
	// MT_REAL_MIGRATE is a message type for entity migrations
	CommandList_MT_REAL_MIGRATE CommandList = 17
	// MT_QUERY_SPACE_GAMEID_FOR_MIGRATE is a message type for entity migrations
	CommandList_MT_QUERY_SPACE_GAMEID_FOR_MIGRATE CommandList = 18
	CommandList_MT_CANCEL_MIGRATE                 CommandList = 19
	// MT_CALL_NIL_SPACES message is used to call nil spaces on all games
	CommandList_MT_CALL_NIL_SPACES CommandList = 20
	// MT_SET_GAME_ID_ACK is sent by dispatcher to game to ACK MT_SET_GAME_ID message
	CommandList_MT_SET_GAME_ID_ACK CommandList = 21
	// MT_NOTIFY_GAME_CONNECTED is sent by dispatcher to game to notify new game connected
	CommandList_MT_NOTIFY_GAME_CONNECTED    CommandList = 22
	CommandList_MT_NOTIFY_GAME_DISCONNECTED CommandList = 23
	CommandList_MT_NOTIFY_DEPLOYMENT_READY  CommandList = 24
	// MT_GAME_LBC_INFO contains game load balacing info
	CommandList_MT_GAME_LBC_INFO CommandList = 25
	// MT_GATE_SERVICE_MSG_TYPE_START is the first message types that should be handled by GateService
	CommandList_MT_GATE_SERVICE_MSG_TYPE_START CommandList = 1000
	// MT_REDIRECT_TO_GATEPROXY_MSG_TYPE_START is the first message type that should be redirected to client proxy
	CommandList_MT_REDIRECT_TO_GATEPROXY_MSG_TYPE_START CommandList = 1001
	// MT_CREATE_ENTITY_ON_CLIENT message type
	CommandList_MT_CREATE_ENTITY_ON_CLIENT CommandList = 1002
	// MT_DESTROY_ENTITY_ON_CLIENT message type
	CommandList_MT_DESTROY_ENTITY_ON_CLIENT CommandList = 1003
	// MT_NOTIFY_MAP_ATTR_CHANGE_ON_CLIENT message type
	CommandList_MT_NOTIFY_MAP_ATTR_CHANGE_ON_CLIENT CommandList = 1004
	// MT_NOTIFY_MAP_ATTR_DEL_ON_CLIENT message type
	CommandList_MT_NOTIFY_MAP_ATTR_DEL_ON_CLIENT CommandList = 1005
	// MT_NOTIFY_LIST_ATTR_CHANGE_ON_CLIENT message type
	CommandList_MT_NOTIFY_LIST_ATTR_CHANGE_ON_CLIENT CommandList = 1006
	// MT_NOTIFY_LIST_ATTR_POP_ON_CLIENT message type
	CommandList_MT_NOTIFY_LIST_ATTR_POP_ON_CLIENT CommandList = 1007
	// MT_NOTIFY_LIST_ATTR_APPEND_ON_CLIENT message type
	CommandList_MT_NOTIFY_LIST_ATTR_APPEND_ON_CLIENT CommandList = 1008
	// MT_SET_CLIENTPROXY_FILTER_PROP message type
	CommandList_MT_SET_CLIENTPROXY_FILTER_PROP CommandList = 1009
	// MT_CLEAR_CLIENTPROXY_FILTER_PROPS message type
	CommandList_MT_CLEAR_CLIENTPROXY_FILTER_PROPS CommandList = 1010
	// MT_NOTIFY_MAP_ATTR_CLEAR_ON_CLIENT message type
	CommandList_MT_NOTIFY_MAP_ATTR_CLEAR_ON_CLIENT CommandList = 1011
	// MT_REDIRECT_TO_GATEPROXY_MSG_TYPE_STOP message type
	CommandList_MT_REDIRECT_TO_GATEPROXY_MSG_TYPE_STOP CommandList = 1499
	// MT_CALL_FILTERED_CLIENTS message type: messages to be processed by GateService from Dispatcher, but not redirected to clients
	CommandList_MT_CALL_FILTERED_CLIENTS CommandList = 1501
	// MT_SYNC_POSITION_YAW_ON_CLIENTS message type
	CommandList_MT_SYNC_POSITION_YAW_ON_CLIENTS CommandList = 1502
	// MT_GATE_SERVICE_MSG_TYPE_STOP message type
	CommandList_MT_GATE_SERVICE_MSG_TYPE_STOP CommandList = 1999
	// MT_SET_CLIENT_CLIENTID message is sent to client to set its clientid
	CommandList_MT_SET_CLIENT_CLIENTID               CommandList = 2001
	CommandList_MT_UDP_SYNC_CONN_NOTIFY_CLIENTID     CommandList = 2002
	CommandList_MT_UDP_SYNC_CONN_NOTIFY_CLIENTID_ACK CommandList = 2003
	// MT_HEARTBEAT_FROM_CLIENT is sent by client to notify the gate server that the client is alive
	CommandList_MT_HEARTBEAT_FROM_CLIENT CommandList = 2004
)

var CommandList_name = map[int32]string{
	0:    "MT_SYSTEM_SERVICE_MSG_TYPE_START",
	1:    "MT_SET_GAME_ID",
	2:    "MT_SET_GATE_ID",
	3:    "MT_NOTIFY_CREATE_ENTITY",
	4:    "MT_NOTIFY_DESTROY_ENTITY",
	5:    "MT_KVREG_REGISTER",
	6:    "MT_UNDECLARE_SERVICE",
	7:    "MT_CREATE_ENTITY_SOMEWHERE",
	8:    "MT_LOAD_ENTITY_SOMEWHERE",
	9:    "MT_NOTIFY_CLIENT_CONNECTED",
	10:   "MT_NOTIFY_CLIENT_DISCONNECTED",
	11:   "MT_SYNC_POSITION_YAW_FROM_CLIENT",
	12:   "MT_NOTIFY_ALL_GAMES_CONNECTED",
	13:   "MT_NOTIFY_GATE_DISCONNECTED",
	14:   "MT_START_FREEZE_GAME",
	15:   "MT_START_FREEZE_GAME_ACK",
	16:   "MT_MIGRATE_REQUEST",
	17:   "MT_REAL_MIGRATE",
	18:   "MT_QUERY_SPACE_GAMEID_FOR_MIGRATE",
	19:   "MT_CANCEL_MIGRATE",
	20:   "MT_CALL_NIL_SPACES",
	21:   "MT_SET_GAME_ID_ACK",
	22:   "MT_NOTIFY_GAME_CONNECTED",
	23:   "MT_NOTIFY_GAME_DISCONNECTED",
	24:   "MT_NOTIFY_DEPLOYMENT_READY",
	25:   "MT_GAME_LBC_INFO",
	1000: "MT_GATE_SERVICE_MSG_TYPE_START",
	1001: "MT_REDIRECT_TO_GATEPROXY_MSG_TYPE_START",
	1002: "MT_CREATE_ENTITY_ON_CLIENT",
	1003: "MT_DESTROY_ENTITY_ON_CLIENT",
	1004: "MT_NOTIFY_MAP_ATTR_CHANGE_ON_CLIENT",
	1005: "MT_NOTIFY_MAP_ATTR_DEL_ON_CLIENT",
	1006: "MT_NOTIFY_LIST_ATTR_CHANGE_ON_CLIENT",
	1007: "MT_NOTIFY_LIST_ATTR_POP_ON_CLIENT",
	1008: "MT_NOTIFY_LIST_ATTR_APPEND_ON_CLIENT",
	1009: "MT_SET_CLIENTPROXY_FILTER_PROP",
	1010: "MT_CLEAR_CLIENTPROXY_FILTER_PROPS",
	1011: "MT_NOTIFY_MAP_ATTR_CLEAR_ON_CLIENT",
	1499: "MT_REDIRECT_TO_GATEPROXY_MSG_TYPE_STOP",
	1501: "MT_CALL_FILTERED_CLIENTS",
	1502: "MT_SYNC_POSITION_YAW_ON_CLIENTS",
	1999: "MT_GATE_SERVICE_MSG_TYPE_STOP",
	2001: "MT_SET_CLIENT_CLIENTID",
	2002: "MT_UDP_SYNC_CONN_NOTIFY_CLIENTID",
	2003: "MT_UDP_SYNC_CONN_NOTIFY_CLIENTID_ACK",
	2004: "MT_HEARTBEAT_FROM_CLIENT",
}

var CommandList_value = map[string]int32{
	"MT_SYSTEM_SERVICE_MSG_TYPE_START":        0,
	"MT_SET_GAME_ID":                          1,
	"MT_SET_GATE_ID":                          2,
	"MT_NOTIFY_CREATE_ENTITY":                 3,
	"MT_NOTIFY_DESTROY_ENTITY":                4,
	"MT_KVREG_REGISTER":                       5,
	"MT_UNDECLARE_SERVICE":                    6,
	"MT_CREATE_ENTITY_SOMEWHERE":              7,
	"MT_LOAD_ENTITY_SOMEWHERE":                8,
	"MT_NOTIFY_CLIENT_CONNECTED":              9,
	"MT_NOTIFY_CLIENT_DISCONNECTED":           10,
	"MT_SYNC_POSITION_YAW_FROM_CLIENT":        11,
	"MT_NOTIFY_ALL_GAMES_CONNECTED":           12,
	"MT_NOTIFY_GATE_DISCONNECTED":             13,
	"MT_START_FREEZE_GAME":                    14,
	"MT_START_FREEZE_GAME_ACK":                15,
	"MT_MIGRATE_REQUEST":                      16,
	"MT_REAL_MIGRATE":                         17,
	"MT_QUERY_SPACE_GAMEID_FOR_MIGRATE":       18,
	"MT_CANCEL_MIGRATE":                       19,
	"MT_CALL_NIL_SPACES":                      20,
	"MT_SET_GAME_ID_ACK":                      21,
	"MT_NOTIFY_GAME_CONNECTED":                22,
	"MT_NOTIFY_GAME_DISCONNECTED":             23,
	"MT_NOTIFY_DEPLOYMENT_READY":              24,
	"MT_GAME_LBC_INFO":                        25,
	"MT_GATE_SERVICE_MSG_TYPE_START":          1000,
	"MT_REDIRECT_TO_GATEPROXY_MSG_TYPE_START": 1001,
	"MT_CREATE_ENTITY_ON_CLIENT":              1002,
	"MT_DESTROY_ENTITY_ON_CLIENT":             1003,
	"MT_NOTIFY_MAP_ATTR_CHANGE_ON_CLIENT":     1004,
	"MT_NOTIFY_MAP_ATTR_DEL_ON_CLIENT":        1005,
	"MT_NOTIFY_LIST_ATTR_CHANGE_ON_CLIENT":    1006,
	"MT_NOTIFY_LIST_ATTR_POP_ON_CLIENT":       1007,
	"MT_NOTIFY_LIST_ATTR_APPEND_ON_CLIENT":    1008,
	"MT_SET_CLIENTPROXY_FILTER_PROP":          1009,
	"MT_CLEAR_CLIENTPROXY_FILTER_PROPS":       1010,
	"MT_NOTIFY_MAP_ATTR_CLEAR_ON_CLIENT":      1011,
	"MT_REDIRECT_TO_GATEPROXY_MSG_TYPE_STOP":  1499,
	"MT_CALL_FILTERED_CLIENTS":                1501,
	"MT_SYNC_POSITION_YAW_ON_CLIENTS":         1502,
	"MT_GATE_SERVICE_MSG_TYPE_STOP":           1999,
	"MT_SET_CLIENT_CLIENTID":                  2001,
	"MT_UDP_SYNC_CONN_NOTIFY_CLIENTID":        2002,
	"MT_UDP_SYNC_CONN_NOTIFY_CLIENTID_ACK":    2003,
	"MT_HEARTBEAT_FROM_CLIENT":                2004,
}

func (x CommandList) String() string {
	return proto.EnumName(CommandList_name, int32(x))
}

func (CommandList) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5348f5fd43b86499, []int{0}
}

type WrapMessage struct {
	Cmd                  CommandList `protobuf:"varint,1,opt,name=cmd,proto3,enum=pb.CommandList" json:"cmd,omitempty"`
	CmdAck               CommandList `protobuf:"varint,2,opt,name=CmdAck,proto3,enum=pb.CommandList" json:"CmdAck,omitempty"`
	Content              []byte      `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Code                 uint32      `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WrapMessage) Reset()         { *m = WrapMessage{} }
func (m *WrapMessage) String() string { return proto.CompactTextString(m) }
func (*WrapMessage) ProtoMessage()    {}
func (*WrapMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5348f5fd43b86499, []int{0}
}
func (m *WrapMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WrapMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WrapMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WrapMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrapMessage.Merge(m, src)
}
func (m *WrapMessage) XXX_Size() int {
	return m.Size()
}
func (m *WrapMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_WrapMessage.DiscardUnknown(m)
}

var xxx_messageInfo_WrapMessage proto.InternalMessageInfo

func (m *WrapMessage) GetCmd() CommandList {
	if m != nil {
		return m.Cmd
	}
	return CommandList_MT_SYSTEM_SERVICE_MSG_TYPE_START
}

func (m *WrapMessage) GetCmdAck() CommandList {
	if m != nil {
		return m.CmdAck
	}
	return CommandList_MT_SYSTEM_SERVICE_MSG_TYPE_START
}

func (m *WrapMessage) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *WrapMessage) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterEnum("pb.CommandList", CommandList_name, CommandList_value)
	proto.RegisterType((*WrapMessage)(nil), "pb.WrapMessage")
}

func init() { proto.RegisterFile("WrapMessage.proto", fileDescriptor_5348f5fd43b86499) }

var fileDescriptor_5348f5fd43b86499 = []byte{
	// 816 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xcb, 0x52, 0x1b, 0x47,
	0x14, 0xf5, 0x00, 0x61, 0x92, 0x96, 0x8d, 0x9a, 0x6b, 0x8c, 0x95, 0x10, 0x0b, 0x81, 0xb1, 0x21,
	0x8f, 0x62, 0x91, 0x2c, 0xb3, 0x6a, 0x7a, 0xae, 0x44, 0x97, 0xa7, 0xa7, 0xc7, 0xdd, 0x8d, 0xc9,
	0x78, 0xd3, 0xc5, 0xab, 0x52, 0xa9, 0x14, 0x48, 0x05, 0xfc, 0x43, 0x7e, 0x21, 0x9f, 0x94, 0x5d,
	0x9e, 0xbb, 0x54, 0x52, 0x29, 0xb2, 0xc9, 0xfb, 0xb9, 0xca, 0x2e, 0xa5, 0x56, 0x8b, 0x99, 0x01,
	0x94, 0xf2, 0x4a, 0x52, 0x9f, 0x73, 0xef, 0x99, 0x7b, 0xee, 0xe9, 0x11, 0x99, 0xdf, 0x3d, 0xdd,
	0x1b, 0xc8, 0xa3, 0xb3, 0xb3, 0xbd, 0x0f, 0x8e, 0x36, 0x07, 0xa7, 0xfd, 0xf3, 0x3e, 0x4c, 0x0d,
	0xf6, 0x57, 0x3f, 0x8e, 0x48, 0xa3, 0x82, 0xc0, 0x0a, 0x99, 0x3e, 0x38, 0x3e, 0x6c, 0x45, 0x9d,
	0x68, 0x63, 0xee, 0x9d, 0xe6, 0xe6, 0x60, 0x7f, 0x93, 0xf7, 0x8f, 0x8f, 0xf7, 0x4e, 0x0e, 0xd3,
	0x0f, 0xcf, 0xce, 0xf5, 0x10, 0x83, 0x75, 0x32, 0xcb, 0x8f, 0x0f, 0xd9, 0xc1, 0x47, 0xad, 0xa9,
	0x9b, 0x59, 0x01, 0x86, 0x16, 0x89, 0x0f, 0xfa, 0x27, 0xe7, 0x47, 0x27, 0xe7, 0xad, 0xe9, 0x4e,
	0xb4, 0x71, 0x5b, 0x8f, 0x7f, 0x02, 0x90, 0x99, 0x83, 0xfe, 0xe1, 0x51, 0x6b, 0xa6, 0x13, 0x6d,
	0xdc, 0xd1, 0xfe, 0xfb, 0x9b, 0xff, 0x36, 0x48, 0xa3, 0xd2, 0x05, 0xd6, 0x48, 0x47, 0x5a, 0x67,
	0x0a, 0x63, 0x51, 0x3a, 0x83, 0xfa, 0x99, 0xe0, 0xe8, 0xa4, 0xe9, 0x39, 0x5b, 0xe4, 0xe8, 0x8c,
	0x65, 0xda, 0xd2, 0x5b, 0x00, 0x64, 0x6e, 0xc8, 0x42, 0xeb, 0x7a, 0x4c, 0xa2, 0x13, 0x09, 0x8d,
	0x6a, 0x67, 0xd6, 0x9f, 0x4d, 0xc1, 0x12, 0xb9, 0x2f, 0xad, 0xcb, 0x94, 0x15, 0xdd, 0xc2, 0x71,
	0x8d, 0x43, 0x00, 0x33, 0x2b, 0x6c, 0x41, 0xa7, 0xe1, 0x75, 0xd2, 0x2a, 0xc1, 0x04, 0x8d, 0xd5,
	0xaa, 0x18, 0xa3, 0x33, 0x70, 0x8f, 0xcc, 0x4b, 0xeb, 0x9e, 0x3c, 0xd3, 0xd8, 0x73, 0x1a, 0x7b,
	0xc2, 0x58, 0xd4, 0xf4, 0x25, 0x68, 0x91, 0x05, 0x69, 0xdd, 0x4e, 0x96, 0x20, 0x4f, 0x99, 0xc6,
	0xf1, 0x23, 0xd2, 0x59, 0x68, 0x93, 0xd7, 0xa4, 0xad, 0x8b, 0x38, 0xa3, 0x24, 0xee, 0x6e, 0xa3,
	0x46, 0x1a, 0x07, 0xb9, 0x54, 0xb1, 0xe4, 0x3a, 0xfa, 0x72, 0xa8, 0x1e, 0x3f, 0x69, 0x2a, 0x30,
	0xb3, 0x8e, 0xab, 0x2c, 0x43, 0x6e, 0x31, 0xa1, 0xaf, 0xc0, 0x0a, 0x79, 0x70, 0x0d, 0x4f, 0x84,
	0x29, 0x29, 0xe4, 0xd2, 0xba, 0x8c, 0xbb, 0x5c, 0x19, 0x61, 0x85, 0xca, 0x5c, 0xc1, 0x76, 0x5d,
	0x57, 0x2b, 0x19, 0x4a, 0x68, 0xa3, 0xde, 0x88, 0xa5, 0xa9, 0x77, 0xd0, 0x54, 0xb4, 0x6e, 0xc3,
	0x32, 0x59, 0x2a, 0x29, 0xde, 0xcc, 0x9a, 0xd2, 0x9d, 0x60, 0x82, 0x5f, 0x86, 0xeb, 0x6a, 0xc4,
	0xe7, 0xe8, 0xbb, 0xd0, 0xb9, 0x30, 0xe4, 0x35, 0xc4, 0x31, 0xfe, 0x84, 0x36, 0x61, 0x91, 0x80,
	0xb4, 0x4e, 0x8a, 0x9e, 0x1e, 0x36, 0xd5, 0xf8, 0x74, 0x07, 0x8d, 0xa5, 0x14, 0xee, 0x92, 0xa6,
	0xb4, 0x4e, 0x23, 0x4b, 0xc7, 0x20, 0x9d, 0x87, 0x47, 0x64, 0x45, 0x5a, 0xf7, 0x74, 0x07, 0x75,
	0xe1, 0x4c, 0xce, 0xf8, 0xa8, 0x93, 0x48, 0x5c, 0x57, 0xe9, 0x4b, 0x1a, 0x84, 0x3d, 0x71, 0x96,
	0x71, 0x2c, 0xab, 0xef, 0x06, 0x29, 0x3e, 0x1c, 0x30, 0x13, 0xe9, 0xa8, 0x81, 0xa1, 0x0b, 0xe1,
	0xbc, 0x92, 0x1c, 0xff, 0x68, 0xf7, 0xea, 0x61, 0xf0, 0x50, 0x39, 0xf0, 0xe2, 0x55, 0x47, 0xe4,
	0x15, 0x47, 0xee, 0xd7, 0xd7, 0x97, 0x60, 0x9e, 0xaa, 0x42, 0x0e, 0x57, 0xa4, 0x91, 0x25, 0x05,
	0x6d, 0xc1, 0x02, 0xa1, 0x32, 0x48, 0xa6, 0x5b, 0xdc, 0x89, 0xac, 0xab, 0xe8, 0xab, 0xf0, 0x90,
	0xb4, 0x65, 0x88, 0xeb, 0x84, 0xa8, 0xff, 0x18, 0xc3, 0xdb, 0x64, 0xdd, 0x9b, 0x93, 0x08, 0x8d,
	0xdc, 0x3a, 0xab, 0x7c, 0x41, 0xae, 0xd5, 0xfb, 0xc5, 0x55, 0xf6, 0x4f, 0x31, 0x2c, 0xdf, 0x90,
	0x42, 0x95, 0x8d, 0xd7, 0xff, 0x73, 0x0c, 0x1d, 0x3f, 0x4a, 0x3d, 0xee, 0x15, 0xc6, 0x2f, 0x31,
	0x6c, 0x90, 0x87, 0xe5, 0x2c, 0x92, 0xe5, 0x8e, 0x59, 0xab, 0x1d, 0xdf, 0x66, 0x59, 0x0f, 0x2b,
	0xcc, 0x5f, 0x63, 0x78, 0xe4, 0x13, 0x77, 0x95, 0x99, 0x60, 0x5a, 0xa1, 0xfd, 0x16, 0xc3, 0x1b,
	0x64, 0xad, 0xa4, 0xa5, 0xc2, 0xd8, 0x09, 0x1d, 0x7f, 0x8f, 0xe1, 0xb1, 0x5f, 0xfa, 0x35, 0x6a,
	0xae, 0xf2, 0x0a, 0xef, 0x8f, 0x89, 0x2d, 0x59, 0x9e, 0x63, 0x96, 0x54, 0xa8, 0x7f, 0xc6, 0xc1,
	0xe4, 0xe1, 0xc6, 0x47, 0x67, 0x23, 0xe7, 0xba, 0x22, 0xb5, 0xa8, 0x5d, 0xae, 0x55, 0x4e, 0xff,
	0x1a, 0xeb, 0xf2, 0x14, 0x99, 0x9e, 0x44, 0x33, 0xf4, 0xef, 0x18, 0xd6, 0xc9, 0xea, 0x4d, 0xde,
	0xf8, 0xba, 0x52, 0xf5, 0x9f, 0x18, 0xde, 0x22, 0x8f, 0x5f, 0x64, 0x6b, 0x2a, 0xa7, 0xdf, 0x34,
	0xe0, 0x81, 0x0f, 0x9f, 0x0f, 0xeb, 0x48, 0x10, 0x93, 0xd0, 0xca, 0xd0, 0x6f, 0x1b, 0xb0, 0x46,
	0x96, 0x6f, 0xbc, 0xd8, 0x97, 0x82, 0x86, 0x7e, 0xd7, 0x80, 0x55, 0x7f, 0xb1, 0x27, 0x85, 0x49,
	0xe5, 0xf4, 0xb3, 0x26, 0x2c, 0x91, 0xc5, 0x9a, 0x17, 0xe1, 0x43, 0x24, 0xf4, 0x8b, 0x66, 0xd8,
	0xe6, 0x4e, 0x92, 0x8f, 0xa4, 0x86, 0xf1, 0xae, 0xbf, 0x70, 0x44, 0x42, 0xbf, 0x6c, 0x06, 0xeb,
	0xff, 0x97, 0xe6, 0xef, 0xd4, 0x57, 0xcd, 0x30, 0xd7, 0x36, 0x32, 0x6d, 0xb7, 0x90, 0xd9, 0xda,
	0x9b, 0xe8, 0xeb, 0xe6, 0xd6, 0xe2, 0xa7, 0x17, 0xed, 0xe8, 0xf3, 0x8b, 0x76, 0xf4, 0xfd, 0x45,
	0x3b, 0xfa, 0xe4, 0x87, 0xf6, 0xad, 0xe7, 0x33, 0x9b, 0xef, 0x0d, 0xf6, 0xf7, 0x67, 0xfd, 0x1f,
	0xd5, 0xbb, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xd0, 0x60, 0x83, 0xbd, 0x06, 0x00, 0x00,
}

func (m *WrapMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WrapMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WrapMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Code != 0 {
		i = encodeVarintWrapMessage(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintWrapMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CmdAck != 0 {
		i = encodeVarintWrapMessage(dAtA, i, uint64(m.CmdAck))
		i--
		dAtA[i] = 0x10
	}
	if m.Cmd != 0 {
		i = encodeVarintWrapMessage(dAtA, i, uint64(m.Cmd))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWrapMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovWrapMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WrapMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cmd != 0 {
		n += 1 + sovWrapMessage(uint64(m.Cmd))
	}
	if m.CmdAck != 0 {
		n += 1 + sovWrapMessage(uint64(m.CmdAck))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovWrapMessage(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovWrapMessage(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWrapMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWrapMessage(x uint64) (n int) {
	return sovWrapMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WrapMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWrapMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WrapMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WrapMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrapMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= CommandList(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdAck", wireType)
			}
			m.CmdAck = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrapMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdAck |= CommandList(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrapMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWrapMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWrapMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrapMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWrapMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWrapMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWrapMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWrapMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWrapMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWrapMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWrapMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWrapMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWrapMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWrapMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWrapMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWrapMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWrapMessage = fmt.Errorf("proto: unexpected end of group")
)
